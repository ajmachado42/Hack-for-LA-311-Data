'''

This file takes 311 request data from the get_311_request_data_csv API, 
City of LA Neighborhood Council shape files, 
and City of LA 2020 Census block shape files.
Dataframes are cleaned and merged (spatial joined) together to return a CSV file filtered for a specific Neighborhood Council.
The CSV file will only return requests that have corresponding geometries and may drop requests that do not belong to a Census block.

Input: Neighborhood Council to get, file path to 311 request csv, file path to Neighborhood Council shape file, file path to Census block shape file
Output: CSV file with all requests for that NC and its corresponding Census blocks

'''
print('='*75)
NC = input('PLEASE INPUT the requested Neighborhood Council: ')
print()
req_path = input('PLEASE INPUT filepath to the 311 Request csv file generated by the get_311_request_data_csv API: ')
print()
nc_geo_path = './2022_neighborhood_councils/geo_export_88bb18d9-f96c-4351-8be9-594f258ed0d3.shp'
blk_geo_path = './2020_census_blocks/tl_2020_06037_tabblock20.shp'
print('This may take a moment...')


# package imports
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
from titlecase import titlecase

NC = titlecase(NC.strip(' NC'))

try:
    # data imports
    # 311 request dataset from API to csv code
    df = pd.read_csv(req_path)
    # 2022 Neighborhood Council Geodata
    gdf_nc = gpd.read_file(nc_geo_path)
    # 2020 Census Block IDs Geodata
    gdf_blk = gpd.read_file(blk_geo_path)

except FileNotFoundError:
    print('='*75)
    print('Check your filepaths. If filepaths are correct, try troubleshooting geopandas and rerun.')
    quit()
except NameError:
    print('='*75)
    print('Check your NC name or filepaths and rerun.')
    quit()

### 311 Request Data cleaning
# get relevant columns
df = df[['requestId', 'createdDate', 'closedDate', 'typeId', 'typeName', 'address', 'latitude',
        'longitude', 'agencyId', 'agencyName', 'sourceId', 'srnumber', 'sourceName', 'councilId', 'councilName']]
# drop nulls in requests
df.dropna(inplace = True)

# drop duplicates
df.drop_duplicates(subset = 'requestId', inplace = True)

# councilID to object
df['councilID'] = df['councilId'].apply(lambda x: str(x))

# Filter DF for NC
df = df[df['councilName'] == NC]
if len(df) == 0:
    print('='*75)
    print('Check the spelling and format of your Neighborhood Council input and rerun.')
    quit()

### Neighborhood Council cleaning
# get necessary columns; objectid = councilId
gdf_nc = gdf_nc[['name', 'objectid', 'geometry']].sort_values(by = 'objectid').reset_index(drop = True)

# set crs
gdf_nc.to_crs(crs = 'EPSG:4269', inplace = True)

# format data
gdf_nc['name'] = gdf_nc['name'].apply(lambda x: titlecase(x.strip(' NC')))
gdf_nc['objectid'] = gdf_nc['objectid'].apply(lambda x: int(x))

### 2020 Census Block cleaning
gdf_blk = gdf_blk[['GEOID20', 'geometry', 'NAME20', 'TRACTCE20', 'COUNTYFP20']]

# set crs
gdf_blk.to_crs(crs = 'EPSG:4269', inplace = True)

### Spatial join of blocks and neighborhood councils
gdf_blk_nc = gpd.sjoin(gdf_blk, gdf_nc, how = 'inner', predicate = 'within')
gdf_blk_nc = gdf_blk_nc[['objectid', 'name', 'GEOID20', 'geometry']]
gdf_blk_nc['objectid'] = gdf_blk_nc['objectid'].apply(lambda x: int(x))
gdf_blk_nc.rename(columns = {'objectid': 'councilId'}, inplace = True)

### Create geometry points from 311 request lat/lon
geometry = [Point(xy) for xy in zip(df['longitude'], df['latitude'])]

# assign crs value and create GeoDataframe from 311 Requests df with Points geometry variable for spatial join
df_geo = gpd.GeoDataFrame(df, crs = 'EPSG:4269', geometry = geometry)

### Spatial join of 311 points with NC-Block
df_blk_nc = gpd.sjoin(df_geo, gdf_blk_nc, how="left", predicate = 'within')
df_blk_nc = df_blk_nc[['requestId', 'createdDate', 'closedDate', 'typeId', 'typeName',
        'address', 'councilId_left', 'councilName', 'GEOID20']]
# clean up
df_blk_nc.rename(columns = {'councilId_left': 'councilId', 'GEOID20':'blockGeoId20'}, inplace = True)
df_blk_nc.drop_duplicates(subset = ['requestId'], inplace = True)
df_blk_nc.dropna(inplace = True)
df_blk_nc.reset_index(drop = True, inplace = True)

### Save CSV
NC = NC.replace(' ', '_').lower()
df_blk_nc.to_csv(f'{NC}_nc_blk_req.csv', index = False)

### Finalization Confirmation
print('='*75)
print(f'Here is the first 10 rows for {NC} 311 requests with Census block ID.\nTHE CSV FILE SHOULD BE IN YOUR CURRENT DIRECTORY.')
print(f'CSV rows x columns {df_blk_nc.shape}')
print('-'*75)
print(df_blk_nc.head(10))